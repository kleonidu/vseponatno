
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from ..engine.session import MemoryStore
from ..engine.skills import SKILLS, best_skill, TutorState, Step

router = Router(name=__name__)
store = MemoryStore()

def _current_step_text(state: TutorState) -> str:
    step = state.steps[state.step_index]
    return f"–®–∞–≥ {state.step_index+1}/{len(state.steps)}:\n{step.prompt}"

@router.message(Command("new"))
async def on_new(m: Message):
    store.clear(m.from_user.id)
    await m.answer("–û–∫! –ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.")

@router.message(Command("hint"))
async def on_hint(m: Message):
    state = store.get(m.from_user.id)
    if not state or state.finished:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∑–∞–¥–∞—á—É. –ü—Ä–∏—à–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /new.")
    step = state.steps[state.step_index]
    used = state.scratch.get("hints_used", 0)
    if used >= len(step.hint_levels):
        return await m.answer("–ë–æ–ª—å—à–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.")
    hint = step.hint_levels[used]
    state.scratch["hints_used"] = used + 1
    await m.answer(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}")

@router.message(Command("giveup"))
async def on_giveup(m: Message):
    state = store.get(m.from_user.id)
    if not state:
        return await m.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –ü—Ä–∏—à–ª–∏ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    if state.skill_id == "linear_eq":
        text = ("–ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è ax + b = c:\n"
                "1) –í—ã—á–µ—Å—Ç—å b –∏–∑ –æ–±–µ–∏—Ö —á–∞—Å—Ç–µ–π: a¬∑x = c - b\n"
                "2) –†–∞–∑–¥–µ–ª–∏—Ç—å –æ–±–µ —á–∞—Å—Ç–∏ –Ω–∞ a: x = (c - b)/a\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∞–º(–∞) üòâ")
    elif state.skill_id == "quadratic_eq":
        text = ("–ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è:\n"
                "1) –û–ø—Ä–µ–¥–µ–ª–∏ a, b, c\n"
                "2) –ü–æ—Å—á–∏—Ç–∞–π D = b¬≤ - 4ac\n"
                "3) –ï—Å–ª–∏ D‚â•0, x = (-b ¬± ‚àöD)/(2a)")
    elif state.skill_id == "frac_add":
        text = ("–ü–ª–∞–Ω —Å–ª–æ–∂–µ–Ω–∏—è –¥—Ä–æ–±–µ–π a/b + c/d:\n"
                "1) –ù–∞–π–¥–∏ –ù–û–ö –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ–π\n"
                "2) –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä–æ–±–∏ –∫ –Ω–µ–º—É\n"
                "3) –°–ª–æ–∂–∏ —á–∏—Å–ª–∏—Ç–µ–ª–∏ –∏ —Å–æ–∫—Ä–∞—Ç–∏")
    elif state.skill_id == "proportion":
        text = ("–ü–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ a:b = c:x:\n"
                "1) –ü–µ—Ä–µ–π–¥–∏ –∫ –¥—Ä–æ–±—è–º: a/b = c/x\n"
                "2) –ü–µ—Ä–µ–º–Ω–æ–∂—å –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏: a¬∑x = b¬∑c\n"
                "3) –í—ã—Ä–∞–∑–∏ x: x = (b¬∑c)/a")
    else:
        text = "–û–±—â–∏–π –ø–ª–∞–Ω: —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ —à–∞–≥–∏ –∏ –¥–≤–∏–≥–∞–π—Å—è –æ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º."
    await m.answer(text + "\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ—Ç–≤–µ—Ç—å –Ω–∞ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /hint.")

@router.message(F.text)
async def on_text(m: Message):
    uid = m.from_user.id
    state = store.get(uid)

    if not state:
        problem = m.text.strip()
        skill = best_skill(problem)
        state = skill.init(problem)
        store.set(uid, state)
        await m.answer("–ü—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É. –Ø –Ω–µ –¥–∞—é –æ—Ç–≤–µ—Ç, –∞ –≤–µ–¥—É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∫ —Ä–µ—à–µ–Ω–∏—é. ‚úçÔ∏è")
        return await m.answer(_current_step_text(state))

    # route to skill
    skill = {s.id: s for s in SKILLS.values()}[state.skill_id]
    feedback, next_step = skill.next_step(state, m.text.strip())
    if next_step is None:
        if state.finished:
            store.clear(uid)
            return await m.answer(feedback + "\n\n–ì–æ—Ç–æ–≤(–∞) –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ? –ò—Å–ø–æ–ª—å–∑—É–π /new –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç.")
        else:
            return await m.answer(feedback)
    else:
        await m.answer(feedback)
        await m.answer(_current_step_text(state))
